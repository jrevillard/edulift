# Docker Compose for EduLift {{ deployment_environment | capitalize }}
# Generated by Ansible

{# Import URL helper macros #}
{% import '_url_macros.j2' as url %}

{# Compute service URLs with defaults #}
{% set protocol = edulift_deployment.protocol | default('https') %}
{% set base_domain = edulift_deployment.domain %}
{% set http_port = edulift_services.traefik.ports.http %}
{% set https_port = edulift_services.traefik.ports.https %}

{# Compute service URLs with defaults #}
{% set protocol = edulift_deployment.protocol | default('https') %}
{% set base_domain = edulift_deployment.domain %}
{% set http_port = edulift_services.traefik.ports.http %}
{% set https_port = edulift_services.traefik.ports.https %}

{# Build URLs with port configuration #}
{% if https_port == 443 %}
  {# Standard HTTPS port - no port needed in URL #}
  {% set frontend_url = protocol + '://' + base_domain %}
  {% set backend_base_url = protocol + '://' + base_domain %}
  {% set traefik_url = protocol + '://' + base_domain + '/traefik' %}
{% else %}
  {# Custom HTTPS port - include port in URL #}
  {% set frontend_url = protocol + '://' + base_domain + ':' + https_port|string %}
  {% set backend_base_url = protocol + '://' + base_domain + ':' + https_port|string %}
  {% set traefik_url = protocol + '://' + base_domain + ':' + https_port|string + '/traefik' %}
{% endif %}

{# Build specific service URLs #}
{% set backend_url = backend_base_url + '/api' %}
{% set cors_origins = [frontend_url] %}

{% set cors_origins = [frontend_url] %}

{# Override with custom URLs if defined #}
{% if edulift_deployment.urls is defined and edulift_deployment.urls is not none %}
  {% if edulift_deployment.urls.frontend is defined and edulift_deployment.urls.frontend is not none %}
    {% set frontend_url = edulift_deployment.urls.frontend %}
  {% endif %}
  {% if edulift_deployment.urls.backend is defined and edulift_deployment.urls.backend is not none %}
    {% set backend_url = edulift_deployment.urls.backend %}
  {% endif %}
  {% if edulift_deployment.urls.traefik_dashboard is defined and edulift_deployment.urls.traefik_dashboard is not none %}
    {% set traefik_url = edulift_deployment.urls.traefik_dashboard %}
  {% endif %}
{% endif %}

{# Override CORS origins if defined #}
{% if edulift_deployment.cors_origins is defined and edulift_deployment.cors_origins is not none %}
  {% set cors_origins = edulift_deployment.cors_origins %}
{% endif %}

services:
  # Traefik reverse proxy with automatic SSL
  traefik:
    image: {{ docker_images.traefik }}
    container_name: {{ compose_project_name }}-traefik
    restart: unless-stopped
    command:
      # API and dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"
      # Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network={{ compose_project_name }}-network"
      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      # Let's Encrypt
      - "--certificatesresolvers.letsencrypt.acme.email={{ acme_email }}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      # Logging
      - "--log.level={{ edulift_services.traefik.log_level }}"
      - "--accesslog=true"
    ports:
      - "{{ edulift_services.traefik.ports.http }}:80"
      - "{{ edulift_services.traefik.ports.https }}:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - {{ compose_project_name }}_traefik_certs:/letsencrypt
      - ./logs/traefik:/logs
    networks:
      - {{ compose_project_name }}-network
    labels:
      # Dashboard routing
      - "traefik.enable=true"
      - "traefik.http.routers.{{ compose_project_name }}-traefik-dashboard.rule={{ url.traefik_rule(traefik_url) }}"
      - "traefik.http.routers.{{ compose_project_name }}-traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.{{ compose_project_name }}-traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.{{ compose_project_name }}-traefik-dashboard.service=api@internal"
{% if url.uses_path(traefik_url) == 'true' %}
      # Strip path prefix for path-based routing
      - "traefik.http.routers.{{ compose_project_name }}-traefik-dashboard.middlewares={{ compose_project_name }}-traefik-stripprefix,{{ compose_project_name }}-traefik-auth"
      - "traefik.http.middlewares.{{ compose_project_name }}-traefik-stripprefix.stripprefix.prefixes={{ url.get_path(traefik_url) }}"
{% else %}
      # Subdomain-based routing - no prefix stripping needed
      - "traefik.http.routers.{{ compose_project_name }}-traefik-dashboard.middlewares={{ compose_project_name }}-traefik-auth"
{% endif %}
      # Basic auth for dashboard
      - "traefik.http.middlewares.{{ compose_project_name }}-traefik-auth.basicauth.users={{ edulift_services.traefik.security.middlewares.auth_users }}"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: {{ edulift_services.common.healthcheck.interval }}
      timeout: {{ edulift_services.common.healthcheck.timeout }}
      retries: {{ edulift_services.common.healthcheck.retries }}
    deploy:
      resources:
        limits:
          memory: {{ edulift_services.traefik.resources.limits.memory }}
        reservations:
          memory: {{ edulift_services.traefik.resources.reservations.memory }}

  # PostgreSQL Database with backup
  postgres:
    image: {{ docker_images.postgres }}
    container_name: {{ compose_project_name }}-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: {{ postgres_db }}
      POSTGRES_USER: {{ postgres_user }}
      POSTGRES_PASSWORD: {{ postgres_password }}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - {{ compose_project_name }}_postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - {{ compose_project_name }}-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U {{ postgres_user }} -d {{ postgres_db }}",
        ]
      interval: {{ edulift_services.common.healthcheck.interval }}
      timeout: {{ edulift_services.common.healthcheck.timeout }}
      retries: {{ edulift_services.common.healthcheck.retries }}
    deploy:
      resources:
        limits:
          memory: {{ edulift_services.postgres.resources.limits.memory }}
        reservations:
          memory: {{ edulift_services.postgres.resources.reservations.memory }}

  # Redis with persistence
  redis:
    image: {{ docker_images.redis }}
    container_name: {{ compose_project_name }}-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass {{ redis_password }} --maxmemory {{ edulift_services.redis.max_memory }} --maxmemory-policy {{ edulift_services.redis.max_memory_policy }}
    volumes:
      - {{ compose_project_name }}_redis_data:/data
    networks:
      - {{ compose_project_name }}-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: {{ edulift_services.common.healthcheck.interval }}
      timeout: {{ edulift_services.common.healthcheck.timeout }}
      retries: {{ edulift_services.common.healthcheck.retries }}
    deploy:
      resources:
        limits:
          memory: {{ edulift_services.redis.resources.limits.memory }}
        reservations:
          memory: {{ edulift_services.redis.resources.reservations.memory }}

  # Backend API with production optimizations
  backend:
    image: {{ docker_images.backend }}
    pull_policy: always
    container_name: {{ compose_project_name }}-backend
    restart: unless-stopped
    env_file: .env
    volumes:
      - {{ compose_project_name }}_backend_uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - {{ compose_project_name }}-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      # API routes with WebSocket support
      - "traefik.http.routers.{{ compose_project_name }}-backend.rule={{ url.traefik_rule(backend_url) }}"
      - "traefik.http.routers.{{ compose_project_name }}-backend.entrypoints=websecure"
      - "traefik.http.routers.{{ compose_project_name }}-backend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.{{ compose_project_name }}-backend.priority=10"
      - "traefik.http.services.{{ compose_project_name }}-backend.loadbalancer.server.port={{ edulift_services.backend.port }}"
      # WebSocket support
      - "traefik.http.services.{{ compose_project_name }}-backend.loadbalancer.passhostheader=true"
      # CORS middleware
      - "traefik.http.middlewares.{{ compose_project_name }}-backend-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,PATCH,OPTIONS"
      - "traefik.http.middlewares.{{ compose_project_name }}-backend-cors.headers.accesscontrolalloworiginlist={{ cors_origins | join(',') }}"
      - "traefik.http.middlewares.{{ compose_project_name }}-backend-cors.headers.accesscontrolallowcredentials={{ edulift_services.backend.cors.allow_credentials }}"
      - "traefik.http.middlewares.{{ compose_project_name }}-backend-cors.headers.accesscontrolmaxage={{ edulift_services.backend.cors.max_age }}"
      - "traefik.http.middlewares.{{ compose_project_name }}-backend-cors.headers.addvaryheader=true"
      - "traefik.http.middlewares.{{ compose_project_name }}-backend-cors.headers.accesscontrolallowheaders=*"
      # Security headers
      - "traefik.http.middlewares.{{ compose_project_name }}-backend-security.headers.stsSeconds={{ edulift_services.traefik.security.middlewares.sts_seconds }}"
      - "traefik.http.middlewares.{{ compose_project_name }}-backend-security.headers.stsIncludeSubdomains={{ edulift_services.traefik.security.middlewares.sts_include_subdomains }}"
      - "traefik.http.middlewares.{{ compose_project_name }}-backend-security.headers.stsPreload={{ edulift_services.traefik.security.middlewares.sts_preload }}"
      - "traefik.http.routers.{{ compose_project_name }}-backend.middlewares={{ compose_project_name }}-backend-cors,{{ compose_project_name }}-backend-security"
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "const http = require('http'); http.get('http://127.0.0.1:{{ edulift_services.backend.port }}/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: {{ edulift_services.common.healthcheck.interval }}
      timeout: {{ edulift_services.common.healthcheck.timeout }}
      retries: {{ edulift_services.common.healthcheck.retries }}
      start_period: {{ edulift_services.common.healthcheck.start_period | default('40s') }}
    deploy:
      resources:
        limits:
          memory: {{ edulift_services.backend.resources.limits.memory }}
        reservations:
          memory: {{ edulift_services.backend.resources.reservations.memory }}

  # Frontend with Nginx (all-in-one)
  frontend:
    image: {{ docker_images.frontend }}
    pull_policy: always
    container_name: {{ compose_project_name }}-frontend
    restart: unless-stopped
    environment:
      # Runtime configuration - injected by docker-entrypoint.sh
      VITE_API_URL: {{ backend_url }}/v1
      VITE_SOCKET_URL: {{ backend_base_url }}
      VITE_SOCKET_FORCE_POLLING: "false"
    networks:
      - {{ compose_project_name }}-network
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
      # Frontend routes (root and all non-api paths)
      - "traefik.http.routers.{{ compose_project_name }}-frontend.rule={{ url.traefik_rule(frontend_url) }}"
      - "traefik.http.routers.{{ compose_project_name }}-frontend.entrypoints=websecure"
      - "traefik.http.routers.{{ compose_project_name }}-frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.{{ compose_project_name }}-frontend.priority=1"
      - "traefik.http.services.{{ compose_project_name }}-frontend.loadbalancer.server.port={{ edulift_services.frontend.port }}"
      # Security headers
      - "traefik.http.middlewares.{{ compose_project_name }}-frontend-security.headers.stsSeconds={{ edulift_services.traefik.security.middlewares.sts_seconds }}"
      - "traefik.http.middlewares.{{ compose_project_name }}-frontend-security.headers.stsIncludeSubdomains={{ edulift_services.traefik.security.middlewares.sts_include_subdomains }}"
      - "traefik.http.middlewares.{{ compose_project_name }}-frontend-security.headers.stsPreload={{ edulift_services.traefik.security.middlewares.sts_preload }}"
      - "traefik.http.middlewares.{{ compose_project_name }}-frontend-security.headers.frameDeny={{ edulift_services.frontend.security.headers.frame_deny }}"
      - "traefik.http.middlewares.{{ compose_project_name }}-frontend-security.headers.contentTypeNosniff={{ edulift_services.frontend.security.headers.content_type_nosniff }}"
      - "traefik.http.middlewares.{{ compose_project_name }}-frontend-security.headers.browserXssFilter={{ edulift_services.frontend.security.headers.browser_xss_filter }}"
      - "traefik.http.routers.{{ compose_project_name }}-frontend.middlewares={{ compose_project_name }}-frontend-security"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:{{ edulift_services.frontend.port }}/health",
        ]
      interval: {{ edulift_services.common.healthcheck.interval }}
      timeout: {{ edulift_services.common.healthcheck.timeout }}
      retries: {{ edulift_services.common.healthcheck.retries }}
    deploy:
      resources:
        limits:
          memory: {{ edulift_services.frontend.resources.limits.memory }}
        reservations:
          memory: {{ edulift_services.frontend.resources.reservations.memory }}

volumes:
  {{ compose_project_name }}_traefik_certs:
    driver: local
  {{ compose_project_name }}_postgres_data:
    driver: local
  {{ compose_project_name }}_redis_data:
    driver: local
  {{ compose_project_name }}_backend_uploads:
    driver: local

networks:
  {{ compose_project_name }}-network:
    driver: bridge
    name: {{ compose_project_name }}-network
