name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Backend tests job
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd="pg_isready -U test_user -d test_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Create test environment file
        run: |
          cd backend
          cat > .env.test << 'EOF'
          NODE_ENV=test
          PORT=3001
          DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL=redis://localhost:6379
          JWT_SECRET=test_jwt_secret_key_for_ci
          EMAIL_HOST=localhost
          EMAIL_PORT=587
          EMAIL_USER=test@example.com
          EMAIL_PASSWORD=test_password
          EMAIL_FROM=test@example.com
          FRONTEND_URL=http://localhost:3000
          EOF

      - name: Generate Prisma client
        run: |
          cd backend
          npx prisma generate

      - name: Run database migrations
        run: |
          cd backend
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

      - name: Run TypeScript type checking
        run: |
          cd backend
          npm run typecheck

      - name: Run ESLint
        run: |
          cd backend
          npm run lint

      - name: Validate TypeScript build (producibility check)
        run: |
          cd backend
          npx tsc --outDir /tmp/tsc-validate

      - name: Run backend tests (with tsx runtime)
        run: |
          cd backend
          npm run test:ci
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_ci
          EMAIL_HOST: localhost
          EMAIL_PORT: 587
          EMAIL_USER: test@example.com
          EMAIL_PASSWORD: test_password
          EMAIL_FROM: test@example.com
          FRONTEND_URL: http://localhost:3000

      - name: Test tsx server startup (production mode)
        run: |
          cd backend
          # Start server with tsx in background
          npm start &
          SERVER_PID=$!

          # Wait for server to start (max 30 seconds)
          for i in {1..30}; do
            if curl -s http://localhost:3001/health > /dev/null; then
              echo "✅ Server started successfully with tsx"
              kill $SERVER_PID
              exit 0
            fi
            sleep 1
          done

          echo "❌ Server failed to start with tsx"
          kill $SERVER_PID || true
          exit 1
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_ci
          EMAIL_HOST: localhost
          EMAIL_PORT: 587
          EMAIL_USER: test@example.com
          EMAIL_PASSWORD: test_password
          EMAIL_FROM: test@example.com
          FRONTEND_URL: http://localhost:3000

  # Frontend tests job
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run TypeScript type checking
        run: |
          cd frontend
          npx tsc -b --noEmit

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:run
