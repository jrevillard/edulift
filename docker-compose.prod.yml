# Production Docker Compose with monitoring and security

services:
  # PostgreSQL Database with backup
  postgres:
    image: postgres:15-alpine
    container_name: edulift-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-edulift}
      POSTGRES_USER: ${POSTGRES_USER:-edulift}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - edulift_postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - edulift-prod-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-edulift} -d ${POSTGRES_DB:-edulift}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis with persistence
  redis:
    image: redis:7-alpine
    container_name: edulift-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - edulift_redis_prod_data:/data
    networks:
      - edulift-prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend API with production optimizations
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: edulift-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-edulift}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-edulift}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM}
      FRONTEND_URL: ${FRONTEND_URL}
    volumes:
      - edulift_backend_uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - edulift-prod-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "const http = require('http'); http.get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend with Nginx (all-in-one)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_SOCKET_URL: ${VITE_SOCKET_URL}
        VITE_SOCKET_FORCE_POLLING: ${VITE_SOCKET_FORCE_POLLING:-false}
    container_name: edulift-frontend-prod
    restart: unless-stopped
    ports:
      - "6000:80"
    networks:
      - edulift-prod-network
    depends_on:
      - backend
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:80/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  edulift_postgres_prod_data:
    driver: local
  edulift_redis_prod_data:
    driver: local
  edulift_backend_uploads:
    driver: local

networks:
  edulift-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
